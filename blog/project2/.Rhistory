library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
blueprinty <- read_csv("blueprinty.csv")
head(blueprinty)
summary(blueprinty)
# Histogram of number of patents by customer status
ggplot(blueprinty, aes(x = num_patents, fill = as.factor(iscustomer))) +
geom_histogram(position = "identity", alpha = 0.6, bins = 20) +
labs(title = "Number of Patents by Customer Status",
x = "Number of Patents",
fill = "Customer") +
theme_minimal()
# Compare mean number of patents by customer status
blueprinty %>%
group_by(iscustomer) %>%
summarise(mean_patents = mean(num_patents, na.rm = TRUE),
sd_patents = sd(num_patents, na.rm = TRUE),
count = n())
# Histogram of number of patents by customer status
ggplot(blueprinty, aes(x = patents, fill = as.factor(iscustomer))) +
geom_histogram(position = "identity", alpha = 0.6, bins = 20) +
labs(title = "Number of Patents by Customer Status",
x = "Number of Patents",
fill = "Customer") +
theme_minimal()
# Compare mean number of patents by customer status
blueprinty %>%
group_by(iscustomer) %>%
summarise(mean_patents = mean(patents, na.rm = TRUE),
sd_patents = sd(patents, na.rm = TRUE),
count = n())
# Region distribution by customer status
ggplot(blueprinty, aes(x = as.factor(region), fill = as.factor(iscustomer))) +
geom_bar(position = "fill") +
labs(title = "Region Distribution by Customer Status",
x = "Region",
y = "Proportion",
fill = "Customer") +
theme_minimal()
# Compare average age by customer status
blueprinty %>%
group_by(iscustomer) %>%
summarise(mean_age = mean(age, na.rm = TRUE),
sd_age = sd(age, na.rm = TRUE),
count = n())
# Histogram of age by customer status
ggplot(blueprinty, aes(x = age, fill = as.factor(iscustomer))) +
geom_histogram(position = "identity", bins = 20, alpha = 0.6) +
labs(title = "Age Distribution by Customer Status",
x = "Firm Age (Years)",
fill = "Customer") +
theme_minimal()
poisson_loglikelihood <- function(lambda, Y) {
if (lambda <= 0) return(-Inf)
sum(-lambda + Y * log(lambda) - lgamma(Y + 1))
}
poisson_loglikelihood <- function(lambda, Y) {
if (lambda <= 0) return(-Inf)
sum(-lambda + Y * log(lambda) - lgamma(Y + 1))
}
Y <- blueprinty$patents
lambda_vals <- seq(0.1, 10, by = 0.1)
loglik_vals <- sapply(lambda_vals, function(l) poisson_loglikelihood(l, Y))
plot(lambda_vals, loglik_vals, type = "l", lwd = 2,
main = "Log-Likelihood of Poisson Model",
xlab = expression(lambda),
ylab = "Log-Likelihood")
# Use optim to find the MLE for lambda
mle_result <- optim(par = 1,  # starting value
fn = function(lambda) -poisson_loglikelihood(lambda, blueprinty$patents),
method = "Brent",
lower = 0.01, upper = 20)
# Print estimated lambda
mle_result$par
mle_result <- optim(par = 1,
fn = function(lambda) -poisson_loglikelihood(lambda, blueprinty$patents),
method = "Brent",
lower = 0.01, upper = 20)
mle_result$par
poisson_regression_loglikelihood <- function(beta, Y, X) {
eta <- X %*% beta
lambda <- exp(eta)
loglik <- sum(-lambda + Y * log(lambda) - lgamma(Y + 1))
return(-loglik)
}
blueprinty <- blueprinty %>%
mutate(age2 = age^2,
region = as.factor(region),
iscustomer = as.numeric(iscustomer))
X <- model.matrix(~ age + age2 + region + iscustomer, data = blueprinty)
Y <- blueprinty$patents
init_beta <- rep(0, ncol(X))
fit <- optim(par = init_beta,
fn = poisson_regression_loglikelihood,
Y = Y,
X = X,
hessian = TRUE,
method = "BFGS")
beta_hat <- fit$par
hessian <- fit$hessian
se <- sqrt(diag(solve(hessian)))
results <- tibble(term = colnames(X),
estimate = beta_hat,
std_error = se)
results
glm_fit <- glm(patents ~ age + I(age^2) + region + iscustomer,
data = blueprinty,
family = poisson())
summary(glm_fit)
blueprinty <- blueprinty %>%
mutate(age2 = age^2,
region = as.factor(region),
iscustomer = as.numeric(iscustomer))
X <- model.matrix(~ age + age2 + region + iscustomer, data = blueprinty)
Y <- blueprinty$patents
init_beta <- rep(0, ncol(X))
fit <- optim(par = init_beta,
fn = poisson_regression_loglikelihood,
Y = Y,
X = X,
hessian = TRUE,
method = "BFGS")
beta_hat <- fit$par
hessian <- fit$hessian
se <- sqrt(diag(solve(hessian)))
results <- tibble(term = colnames(X),
estimate = beta_hat,
std_error = se)
results
X_glm <- model.matrix(~ age + I(age^2) + region + iscustomer, data = blueprinty)
Y <- blueprinty$patents
init_beta <- rep(0, ncol(X_glm))
fit_glmX <- optim(par = init_beta,
fn = poisson_regression_loglikelihood,
Y = Y,
X = X_glm,
hessian = TRUE,
method = "BFGS")
beta_hat <- fit_glmX$par
hessian <- fit_glmX$hessian
se <- sqrt(diag(solve(hessian)))
results_aligned <- tibble(term = colnames(X_glm),
estimate = beta_hat,
std_error = se)
results_aligned
glm_fit <- glm(patents ~ age + I(age^2) + region + iscustomer,
data = blueprinty,
family = poisson())
summary(glm_fit)
library(broom)
glm_fit <- glm(patents ~ age + I(age^2) + region + iscustomer,
data = blueprinty,
family = poisson())
results_glm <- tidy(glm_fit)
results_glm
library(tidyverse)
blueprinty <- read_csv("blueprinty.csv")
head(blueprinty)
summary(blueprinty)
# Histogram of number of patents by customer status
ggplot(blueprinty, aes(x = patents, fill = as.factor(iscustomer))) +
geom_histogram(position = "identity", alpha = 0.6, bins = 20) +
labs(title = "Number of Patents by Customer Status",
x = "Number of Patents",
fill = "Customer") +
theme_minimal()
# Compare mean number of patents by customer status
blueprinty %>%
group_by(iscustomer) %>%
summarise(mean_patents = mean(patents, na.rm = TRUE),
sd_patents = sd(patents, na.rm = TRUE),
count = n())
# Region distribution by customer status
ggplot(blueprinty, aes(x = as.factor(region), fill = as.factor(iscustomer))) +
geom_bar(position = "fill") +
labs(title = "Region Distribution by Customer Status",
x = "Region",
y = "Proportion",
fill = "Customer") +
theme_minimal()
# Compare average age by customer status
blueprinty %>%
group_by(iscustomer) %>%
summarise(mean_age = mean(age, na.rm = TRUE),
sd_age = sd(age, na.rm = TRUE),
count = n())
# Histogram of age by customer status
ggplot(blueprinty, aes(x = age, fill = as.factor(iscustomer))) +
geom_histogram(position = "identity", bins = 20, alpha = 0.6) +
labs(title = "Age Distribution by Customer Status",
x = "Firm Age (Years)",
fill = "Customer") +
theme_minimal()
poisson_loglikelihood <- function(lambda, Y) {
if (lambda <= 0) return(-Inf)
sum(-lambda + Y * log(lambda) - lgamma(Y + 1))
}
Y <- blueprinty$patents
lambda_vals <- seq(0.1, 10, by = 0.1)
loglik_vals <- sapply(lambda_vals, function(l) poisson_loglikelihood(l, Y))
plot(lambda_vals, loglik_vals, type = "l", lwd = 2,
main = "Log-Likelihood of Poisson Model",
xlab = expression(lambda),
ylab = "Log-Likelihood")
mle_result <- optim(par = 1,
fn = function(lambda) -poisson_loglikelihood(lambda, blueprinty$patents),
method = "Brent",
lower = 0.01, upper = 20)
mle_result$par
poisson_regression_loglikelihood <- function(beta, Y, X) {
eta <- X %*% beta
lambda <- exp(eta)
loglik <- sum(-lambda + Y * log(lambda) - lgamma(Y + 1))
return(-loglik)
}
blueprinty <- blueprinty %>%
mutate(age2 = age^2,
region = as.factor(region),
iscustomer = as.numeric(iscustomer))
X <- model.matrix(~ age + age2 + region + iscustomer, data = blueprinty)
Y <- blueprinty$patents
init_beta <- rep(0, ncol(X))
fit <- optim(par = init_beta,
fn = poisson_regression_loglikelihood,
Y = Y,
X = X,
hessian = TRUE,
method = "BFGS")
beta_hat <- fit$par
hessian <- fit$hessian
se <- sqrt(diag(solve(hessian)))
results <- tibble(term = colnames(X),
estimate = beta_hat,
std_error = se)
results
glm_fit <- glm(patents ~ age + I(age^2) + region + iscustomer,
data = blueprinty,
family = poisson())
summary(glm_fit)
X_0 <- blueprinty %>%
mutate(iscustomer = 0)
X_1 <- blueprinty %>%
mutate(iscustomer = 1)
# Predict using the glm model
y_pred_0 <- predict(glm_fit, newdata = X_0, type = "response")
y_pred_1 <- predict(glm_fit, newdata = X_1, type = "response")
# Compute average difference in predicted patent counts
avg_effect <- mean(y_pred_1 - y_pred_0)
avg_effect
library(tidyverse)
# Read in the Airbnb data
airbnb <- read_csv("airbnb.csv")
# Drop rows with missing values in relevant columns
airbnb_clean <- airbnb %>%
select(number_of_reviews, days, room_type, bathrooms, bedrooms, price,
review_scores_cleanliness, review_scores_location, review_scores_value,
instant_bookable) %>%
drop_na()
# Check basic distributions
airbnb_clean %>%
summary()
# Plot: number of reviews vs. price
ggplot(airbnb_clean, aes(x = price, y = number_of_reviews)) +
geom_point(alpha = 0.3) +
scale_x_log10() +
labs(title = "Number of Reviews vs. Price", x = "Price (log scale)", y = "Number of Reviews")
# Convert categorical variables
airbnb_clean <- airbnb_clean %>%
mutate(
room_type = as.factor(room_type),
instant_bookable = as.factor(instant_bookable)
)
# Fit Poisson regression
airbnb_model <- glm(number_of_reviews ~ log(price + 1) + log(days + 1) +
room_type + bathrooms + bedrooms +
review_scores_cleanliness + review_scores_location + review_scores_value +
instant_bookable,
data = airbnb_clean,
family = poisson())
summary(airbnb_model)
library(tidyverse)
airbnb <- read_csv("airbnb.csv")
glimpse(airbnb)
library(tidyverse)
airbnb <- read_csv("airbnb.csv")
glimpse(airbnb)
airbnb_clean <- airbnb %>%
select(number_of_reviews, days, room_type, bathrooms, bedrooms, price,
review_scores_cleanliness, review_scores_location, review_scores_value,
instant_bookable) %>%
drop_na()
summary(airbnb_clean)
ggplot(airbnb_clean, aes(x = price, y = number_of_reviews)) +
geom_point(alpha = 0.3) +
scale_x_log10() +
labs(title = "Number of Reviews vs. Price", x = "Price (log scale)", y = "Number of Reviews")
airbnb_clean <- airbnb_clean %>%
mutate(
room_type = as.factor(room_type),
instant_bookable = as.factor(instant_bookable)
)
airbnb_model <- glm(number_of_reviews ~ log(price + 1) + log(days + 1) +
room_type + bathrooms + bedrooms +
review_scores_cleanliness + review_scores_location + review_scores_value +
instant_bookable,
data = airbnb_clean,
family = poisson())
summary(airbnb_model)
airbnb_model_nolog <- glm(number_of_reviews ~ price + days +
room_type + bathrooms + bedrooms +
review_scores_cleanliness + review_scores_location + review_scores_value +
instant_bookable,
data = airbnb_clean,
family = poisson())
summary(airbnb_model_nolog)
